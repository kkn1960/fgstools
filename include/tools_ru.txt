<h1>
    Руководство по FGS Tools
</h1>
<br>
<b>
    Введение
</b>
<p>
    Пакет FGS Tools является специализированным инструментом для создания веб-приложений, ориентированных на ввод, вывод и поиск данных. Благодаря концепциям и
    возможностям, заложенным в пакет, резко сокращаются сроки создания таких приложений и объем ручного кодирования, значительно облегчается внесение
    изменений. Пакет позволяет организовать самый сложный поиск данных практически безо всякого кодирования. Встроенный механизм интернационализации позволяет
    с минимальными затратами создавать мультиязычные сайты.
</p>
<p>
    Пакет FGS Tools также может быть очень полезен для быстрого прототипирования, поскольку он позволяет создавать веб - интерфейсы к таблицам базы данных (БД)
    практически безо всякого PHP, SQL или JavaScript кодирования. Кроме этого, низкий барьер входа позволяет даже новичкам получать немедленный результат.
</p>
<p>
    Пакет FGS Tools позволяет создавать три варианта интерфейса пользователя к БД:
</p>
<ul type="disc">
    <li>
        интерфейс к одиночной таблице
    </li>
    <li>
        интерфейс к двум таблицам, связанных отношением master- detail
    </li>
    <li>
        интерфейс к нескольким таблицам, одна из которых является master таблицей, а остальные либо связаны с master таблицей отношением master- detail либо
        нет
    </li>
</ul>
<p>
    Пакет FGS Tools состоит из фреймворка (FGS Factory) и конфигуратора (FGS<strong> </strong>Configurator) и основан на трех концепциях:
</p>
<ul type="disc">
    <li>
        компонентная архитектура
    </li>
    <li>
        спецификации компонент
    </li>
    <li>
        конфигуратор спецификаций
    </li>
</ul>
<p>
    Фреймворк имеет компонентную архитектуру и создает экземпляры компонентов (классов), используя их спецификации.
</p>
<p>
    Фреймворк основан на трех визуальных компонентах Form, Grid и Search и одном невизуальном компоненте Dataset.
</p>
<p>
    Компонент Form это аналог HTML элемента «form» и позволяет пользователю создавать, редактировать, удалять и просматривать отдельные записи таблиц БД.
</p>
<p>
    Компонент Grid это аналог HTML элемента «table» и позволяет пользователю просматривать и редактировать записи таблиц БД.
</p>
<p>
    Компонент Grid позволяет пользователю редактировать записи таблиц БД в виде электронной таблицы или в режиме inline editing.
</p>
<p>
    Компонент Search это аналог HTML элемента «form» и позволяет пользователю формировать фильтры на записи таблиц БД, выводимые в Grid.
</p>
<p>
    Есть еще очень важный невизуальный компонент Dataset служит для установки неявных (скрытых) фильтров на записи таблиц БД.
</p>
<p>
    Компонент Unit служит для организации взаимодействия компонент Form, Grid, Search и Dataset, относящихся к одной и той же таблице базы данных.
</p>
<p>
    Компонент Evaluator используется для вычисления выражений во время исполнения скриптов.
</p>
<p>
    Компонент ListLoader управляет загрузкой динамических списков
</p>
<p>
    Компонент Registry служит для управления хранением и восстановлением состояния компонент и передачи данных между компонентами
</p>
<p>
    Под спецификацией компонента понимается набор параметров, определяющих его вид и поведение.
</p>
<p>
    Использование спецификаций компонент меняет характер разработки веб-приложения. Программист создает спецификации компонент и кодирует, исключительно,
    расширения стандартных компонент.
</p>
<p>
    Конфигуратор – это специальное веб-приложение, созданное на основе фреймворка и предназначенное для создания спецификаций компонент.
</p>
<p>
    Сами спецификации хранятся в таблицах базы данных. Для ускорения работы разрабатываемого приложения конфигуратор экспортирует спецификации компонент в
    файлы спецификаций, которые и использует фреймворк для создания компонент.
</p>
<p>
    Создание спецификаций - это просто заполнение специальных HTML-форм.
</p>
<p>
    Фреймворк формирует SQL запросы на добавление, изменение, удаление и чтение записей таблиц баз данных на основе спецификаций компонент, освобождая тем
    самым программиста от ручного кодирования SQL запросов.
</p>
<p>
    Фреймворк содержит набор стандартных компонент ввода, вывода, поиска, валидаторов и фильтров вводимых данных.
</p>
<p>
    Фреймворк интегрирован с jQuery. Фреймворк имеет встроенную поддержку ввода полей ввода типа autocomplete, зависимых select (chained select’s), режима
    inline editing записей, выводимых компонентом Grid и автоматическую привязку jQuery плагина Datepicker к полям ввода дат. При этом никакого дополнительного
    кодирования на JavaScript или PHP не требуется.
</p>
<p>
    <b>Механизм интернационализации</b>
</p>
<p>
    Языковые варианты сообщений хранятся в таблице fgs_message, которые экспортируются в раздельные для каждого языка файлы сообщений. Спецификации компонент
    для разных языков экспортируются в разные каталоги.
</p>
<p>
    В настоящий момент поддерживаются только русский и английский языки интерфейса.
</p>
<p>
    <b>Аналоги пакета FGS Tools</b>
</p>
<p>
    Некоторые идеи и концепции, лежащие в основе пакета, были позаимствованы из C++Builder, phpMyAdmin, Java Server Faces (JSF) и Smarty. Заимствовалось только
    то, что помогало быстро и с минимальными трудозатратами создавать удобный ввод, вывод и поиск данных. При этом заимствование не было бездумным. Идеи и
    концепции были творчески переработаны и дополнены новыми концепциями и возможностями.
</p>
<p>
    <b>FGS Tools vs phpMyAdmin</b>
</p>
<p>
    У phpMyAdmin заимствован функционал ввода, вывода и поиска записей, но реализован функционал на основе спецификаций.
</p>
<p>
    PhpMyAdmin сначала считывает информацию о полях таблицы и использует ее для вывода записей в табличном виде, или создания формы редактирования записи
    таблицы и формы ввода параметров поиска.
</p>
<p>
    В FGS Tools сделано по-другому. Информация о полях таблицы сначала загружается в системные таблицы. Затем программист вводит спецификации для ввода, вывода
    и поиска записей и экспортирует их в специальные файлы спецификаций, которые и используются фреймворком при создании форм ввода и поиска или для вывода
    записей.
</p>
<p>
    В отличие от phpMyAdmin, можно поменять список полей, изменить тип и порядок ввода, использовать различные валидаторы и фильтры полей и т.д. и т.п.
</p>
<p>
    Если удалить из таблицы какое-то поле, то phpMyAdmin сразу подхватит новую структуру.
</p>
<p>
    В FGS Tools придется сделать:
</p>
<ul type="disc">
    <li>
        Загрузку информацию о полях таблицы в конфигураторе
    </li>
    <li>
        Экспорт спецификаций форм ввода
    </li>
    <li>
        Экспорт спецификаций форм поиска
    </li>
    <li>
        Экспорт спецификаций Grid
    </li>
</ul>
<p>
    Все эти действия выполняются простым выбором пункта меню конфигуратора.
</p>
<p>
    FGS Tools позволяет создавать три основных варианта интерфейса к БД:
</p>
<ul type="disc">
    <li>
        интерфейс к одиночной таблице
    </li>
    <li>
        интерфейс к двум таблицам, связанных между собой отношением master- detail
    </li>
    <li>
        интерфейс к нескольким таблицам, одна из которых является master таблицей, а остальные либо связаны с master таблицей отношением master- detail либо
        нет.
    </li>
</ul>
<p>
    phpMyAdmin реализует только интерфейс к одиночной таблице.
</p>
<p>
    <b>FGS Tools vs C++Builder</b>
</p>
<p>
    C++Builder подал идею использования спецификаций компонент и необходимость создания удобного интерфейса для ввода спецификаций.
</p>
<p>
    C++Builder предоставляет удобный интерфейс для изменения свойств компонент, на основе которых генерируется код компонент. С++Builder сохраняет и загружает
    формы и компоненты проекта в дизайнтайме из .dfm файла.
</p>
<p>
    FGS Tools хранит спецификации в системных таблицах. Для использования спецификаций в приложении конфигуратор экспортирует их в файлы спецификаций.
</p>
<p>
    Если удалить из таблицы какое-то поле, то в C++Builder нужно найти и вручную удалить компоненты, относящиеся к удаленному полю.
</p>
<p>
    <b>FGS Tools vs JSF</b>
</p>
<p>
    JSF подал идеи жизненного цикла обработки запроса (The Request Processing Lifecycle), обработчика событий (Event Listener), использования набора
    визуализации (render kit) для визуализации элементов ввода и вывода полей таблиц.
</p>
<p>
    FGS Tools кроме обработчика событий (EventHandler) содержит обработчик запросов (RequestHandler).
</p>
<p>
    Введено понятие «окно запроса», позволяющее имитацию разных сессий в одном окне браузера и организацию параллельного исполнения нескольких экземпляров
    одного контроллера.
</p>
<p>
    <b>FGS Tools vs Smarty</b>
</p>
<p>
    Шаблонизатор Smarty подсказал идею вывода отладочной информации.
</p>
<p>
    В FGS Tools компонент debug предназначен для сбора и вывода следующих видов отладочной информации:
</p>
<ul type="disc">
    <li>
        Значения отслеживаемых переменных
    </li>
    <li>
        Результаты выполнения SQL запросов
    </li>
    <li>
        Вызовы методов обработчика запросов (RequestHandler) и событий (EventHandler)
    </li>
    <li>
        Инициализируемые классы
    </li>
    <li>
        Журнал экспорта спецификаций
    </li>
</ul>
<p>
    Кроме вышеперечисленных пакетов и фреймворков, в FGS Tools вошли многие возможности моих предыдущих проектов.
</p>
<p>
    <b>Как это скачать, установить и настроить FGS Tools</b>
</p>
<p>
    FGS Tools можно получить на сайте пакета по FGS Tools на странице <a href="http://fgstools.net/download.php">http://fgstools.net/download.php</a>
</p>
<p>
    Пакет разработан на PHP 5.2 для MySql 5.
</p>
<p>
    После получения FGS Tools нужно:
</p>
<ul type="disc">
    <li>
        распаковать архив в нужный каталог сайта (желательно в корневой).
    </li>
    <li>
        создать системные таблицы с помощью SQL скрипта fgstools.sql, входящего в состав пакета
    </li>
</ul>
<p>
    <b>Список системных таблиц:</b>
</p>
<ol start="1" type="1"><li>fgs_column</li>
<li>fgs_component</li>
<li>fgs_condition</li>
<li>fgs_controller</li>
<li>fgs_converter</li>
<li>fgs_dataset</li>
<li>fgs_debug</li>
<li>fgs_element</li>
<li>fgs_export</li>
<li>fgs_field</li>
<li>fgs_filter</li>
<li>fgs_form</li>
<li>fgs_grid</li>
<li>fgs_item</li>
<li>fgs_list</li>
<li>fgs_menu</li>
<li>fgs_message</li>
<li>fgs_option</li>
<li>fgs_parameter</li>
<li>fgs_predicate</li>
<li>fgs_role</li>
<li>fgs_statement</li>
<li>fgs_table</li>
<li>fgs_unit</li>
<li>fgs_user</li>
<li>fgs_validator</li>
</ol>
<p>
    Перед запуском скрипта fgs.sql убедитесь, что у вас нет таблиц с такими названиями.
</p>
<p>
    Конфигурационные опции хранятся в файле include/config.php
</p>
<p>
    Затем настроить параметры подсоединения к базе данных, для чего найти в файле include/config.php раздел «Database name &amp;&amp; connection parameters»:
</p>
<p>
    $dbname="название базы данных";
</p>
<p>
    $gaDbConnect["название базы данных"]=array("server"=&gt;"имя хоста базы данных", "dbname"=&gt;"название базы данных", "dbms"=&gt;"Mysql",
    "codepage"=&gt;"cp1251", "user"=&gt;"root", "password"=&gt;"admin");
</p>
<p>
    Параметр dbms должен быть названием класса драйвера работы с базой данных. В пакет включен драйвер Mysql.inc для работы с MySql.
</p>
